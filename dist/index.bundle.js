(()=>{"use strict";var t={720:(t,o,i)=>{i.d(o,{T:()=>V,em:()=>L,h:()=>D});var e=function(){function t(t,o){void 0===t&&(t=0),void 0===o&&(o=0),this.x=t,this.y=o}return Object.defineProperty(t.prototype,"magnitude",{get:function(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))},set:function(t){var o=Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2));if(0!=o){var i=t/o;this.x*=i,this.y*=i}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"copy",{get:function(){return Object.assign({},this)},enumerable:!1,configurable:!0}),t.prototype.normalize=function(){this.magnitude=1},t.flattenPolygon=function(o,i){for(var e=Number.MAX_VALUE,n=-Number.MAX_VALUE,r=0,a=o;r<a.length;r++){var s=a[r],c=t.dotProduct(s,i);c<e&&(e=c),c>n&&(n=c)}return{min:e,max:n}},t.flattenCircle=function(o,i){var e=this.dotProduct(i,new t(0,0));return{min:e-o,max:e+o}},t.add=function(){for(var o=[],i=0;i<arguments.length;i++)o[i]=arguments[i];for(var e=new t(0,0),n=0,r=o;n<r.length;n++){var a=r[n];e.x+=a.x,e.y+=a.y}return e},t.subtract=function(o,i){return new t(o.x-i.x,o.y-i.y)},t.dotProduct=function(t,o){return t.x*o.x+t.y*o.y},t}(),n=function(t){var o=t.position,i=t.size,n=void 0===i?new e(0,0):i,r=t.catagories,a=void 0===r?[]:r;this.position=o,this.size=n,this.catagories=a},r={},a={x:0,y:0,down:!1};document.addEventListener("keyup",(function(t){r[t.key]=!1})),document.addEventListener("keydown",(function(t){r[t.key]=!0})),document.addEventListener("mousemove",(function(t){a.x=t.clientX,a.y=t.clientY})),document.addEventListener("mousedown",(function(t){a.down=!0})),document.addEventListener("mouseup",(function(t){a.down=!1}));var s,c={getNormals:function(t){for(var o=[],i=0;i<t.length;i++){var n=t[i],r=i>=t.length-1?t[0]:t[i+1],a=new e(-(r.y-n.y),r.x-n.x);a.normalize(),o.push(a)}return o},polygonPolygonTest:function(t,o){Number.MAX_VALUE},circlePolygonTest:function(t,o){for(var i=Number.MAX_VALUE,n=o.collider.transformedVertices(o),r=new e(o.position.x-t.position.x,o.position.y-t.position.y),a=new e,s=0,h=n;s<h.length;s++){var p=h[s],l=t.position.x-Math.pow(o.position.x+p.x,2)+t.position.y-Math.pow(o.position.y+p.y,2);l<i&&(i=l,a.x=o.position.x+p.x,a.y=o.position.y+p.y)}var u=new e(a.x-t.position.x,a.y-t.position.y);u.normalize();var f=e.flattenPolygon(n,u),d=e.dotProduct(u,r);f.min+=d,f.max+=d;var y=e.flattenCircle(t.collider.radius,u);if(f.min-y.max>0||y.min-f.max>0)return!1;var w=y.max-f.min;i=Math.abs(w);var v=c.getNormals(n);for(var x in n){if(f=e.flattenPolygon(n,v[x]),d=e.dotProduct(v[x],r),f.min+=d,f.max+=d,y=e.flattenCircle(t.collider.radius,v[x]),f.min-y.max>0||y.min-f.max>0)return!1;w=y.max-f.min;var m=Math.abs(w);m<i&&(i=m)}return!0},circleCircleTest:function(t,o){var i=t.collider.radius+o.collider.radius;return!(V(t.position,o.position)>i)}},h=(s=function(t,o){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var i in o)Object.prototype.hasOwnProperty.call(o,i)&&(t[i]=o[i])})(t,o)},function(t,o){function i(){this.constructor=t}s(t,o),t.prototype=null===o?Object.create(o):(i.prototype=o.prototype,new i)}),p=function(t){this.type=t},l=function(t){function o(){for(var o=[],i=0;i<arguments.length;i++)o[i]=arguments[i];var e=t.call(this,"polygon")||this;return e.vertices=o,e}return h(o,t),o.prototype.transformedVertices=function(t){return this.vertices.map((function(o){var i=o.copy;if(0!=t.rotation){var e=Math.hypot(o.x,o.y),n=Math.atan2(o.y,o.x);n+=-t.rotation,i.x=Math.cos(n)*e,i.y=Math.sin(n)*e}return i}))},Object.defineProperty(o.prototype,"normals",{get:function(){return c.getNormals(this.vertices)},enumerable:!1,configurable:!0}),o}(p),u=function(t){function o(o){var i=t.call(this,"circle")||this;return i.radius=o,i}return h(o,t),o.prototype.isColliding=function(t){return t instanceof o},o}(p),f=function(){var t=function(o,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var i in o)Object.prototype.hasOwnProperty.call(o,i)&&(t[i]=o[i])})(o,i)};return function(o,i){function e(){this.constructor=o}t(o,i),o.prototype=null===i?Object.create(i):(e.prototype=i.prototype,new e)}}(),d=function(){for(var t=0,o=0,i=arguments.length;o<i;o++)t+=arguments[o].length;var e=Array(t),n=0;for(o=0;o<i;o++)for(var r=arguments[o],a=0,s=r.length;a<s;a++,n++)e[n]=r[a];return e},y=function(t){function o(o){var i=o.position,n=o.radius,r=void 0===n?5:n,a=o.rotation,s=o.creation,c=void 0===s?Date.now():s,h=o.speed,p=void 0===h?15:h,l=o.catagories,f=o.damage,y=void 0===f?10:f,w=t.call(this,{position:i,size:new e(r,r),catagories:d(["projectile"],l)})||this;return w.rotation=a,w.creation=c,w.speed=p,w.damage=y,w.radius=r,w.collider=new u(w.radius),w}return f(o,t),o.prototype.tick=function(){Date.now()>this.creation+3e3&&L.remove(this),this.position.x-=this.speed*Math.sin(this.rotation),this.position.y-=this.speed*Math.cos(this.rotation)},o.prototype.render=function(t){t.translate(this.position.x,this.position.y),t.beginPath(),t.arc(0,0,this.size.x,0,2*Math.PI),t.closePath(),t.fill()},o}(n),w=document.getElementById("game"),v=w.getContext("2d"),x=0,m=function(){v.clearRect(0,0,w.width,w.height),w.width=window.innerWidth,w.height=window.innerHeight,L.entities.forEach((function(t){t.tick(),v.fillStyle="white",v.save(),v.setTransform(1,0,0,1,0,0),v.translate(-D.position.x+w.width/2,-D.position.y+w.height/2),v.globalAlpha=x/1e4,t.render(v),v.restore()})),x+=100,requestAnimationFrame(m)},g=function(){var t=function(o,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var i in o)Object.prototype.hasOwnProperty.call(o,i)&&(t[i]=o[i])})(o,i)};return function(o,i){function e(){this.constructor=o}t(o,i),o.prototype=null===i?Object.create(i):(e.prototype=i.prototype,new e)}}(),_=function(t){function o(o){var i=o.position,n=o.size,r=o.speed,a=void 0===r?1:r,s=o.airFriction,c=void 0===s?.1:s,h=t.call(this,{position:i,size:n,catagories:["player"]})||this;return h.health=100,h.acceleration=new e(0,0),h.speed=a,h.airFriction=c,h.rotation=0,h.lastShot=Date.now(),h.collider=new l(new e(0,-h.size.y/2),new e(h.size.x/2,h.size.y/2),new e(-h.size.x/2,h.size.y/2)),h}return g(o,t),o.prototype.shoot=function(){var t=new e(0,-this.size.y/2),o=Math.hypot(t.x,t.y),i=Math.atan2(t.y,t.x);i+=-this.rotation,t.x=Math.cos(i)*o,t.y=Math.sin(i)*o,L.add(new y({position:e.add(t,this.position),rotation:this.rotation,catagories:["friendly"]}))},o.prototype.tick=function(){var t=this;this.rotation%=360,(r.w||r.ArrowUp)&&(this.acceleration.y-=this.speed),(r.a||r.ArrowLeft)&&(this.acceleration.x-=this.speed),(r.s||r.ArrowDown)&&(this.acceleration.y+=this.speed),(r.d||r.ArrowRight)&&(this.acceleration.x+=this.speed),this.acceleration.x/=1+this.airFriction,this.acceleration.y/=1+this.airFriction,this.position=e.add(this.position,this.acceleration),this.rotation=-Math.atan2(w.height/2-a.y,w.width/2-a.x)+Math.PI/2,a.down&&this.lastShot+100<Date.now()&&(this.shoot(),this.lastShot=Date.now()),this.health<=0&&L.remove(this),L.find(["enemy","projectile"]).forEach((function(o){1==c.circlePolygonTest(o,t)&&(t.health-=o.damage,L.remove(o))}))},o.prototype.render=function(t){for(var o in t.translate(this.position.x,this.position.y),this.collider.vertices){var i=this.collider.transformedVertices(this);t.fillStyle="red",t.fillRect(i[o].x-5,i[o].y-5,10,10)}t.rotate(-this.rotation),t.fillStyle="rgb(255, "+this.health/100*255+", "+this.health/100*255+")",t.beginPath(),t.moveTo(0,-this.size.y/2),t.lineTo(this.size.x/2,this.size.y/2),t.lineTo(0,this.size.y/4),t.lineTo(-this.size.x/2,this.size.y/2),t.lineTo(0,-this.size.y/2),t.closePath(),t.fill()},o}(n),b=function(){function t(){this.entities=[]}return t.prototype.find=function(t){if("string"==typeof t)return this.entities.filter((function(o){return o.catagories.includes(t)}));for(var o=this.entities,i=function(t){o=o.filter((function(o){return o.catagories.includes(t)}))},e=0,n=t;e<n.length;e++)i(n[e]);return o},t.prototype.add=function(t){return this.entities.push(t),t},t.prototype.remove=function(t){"number"==typeof t&&this.entities.splice(t,1),this.entities.splice(this.entities.indexOf(t),1)},t}(),M=function(){var t=function(o,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var i in o)Object.prototype.hasOwnProperty.call(o,i)&&(t[i]=o[i])})(o,i)};return function(o,i){function e(){this.constructor=o}t(o,i),o.prototype=null===i?Object.create(i):(e.prototype=i.prototype,new e)}}(),O=function(t){function o(o){var i=o.position,n=o.size,r=void 0===n?new e(25,25):n,a=o.health,s=void 0===a?100:a,c=t.call(this,{position:i,size:r})||this;return c.collider=new u(25),c.health=s,c.rotation=0,c.lastShot=Date.now(),c}return M(o,t),o.prototype.tick=function(){var t=this,o=L.find("player")[0];null!=o&&(this.rotation=-Math.atan2(this.position.y-o.position.y,this.position.x-o.position.x)+Math.PI/2,this.lastShot+200<Date.now()&&V(o.position,this.position)<500&&(L.add(new y({position:new e(this.position.x,this.position.y),rotation:this.rotation+.05*Math.random(),catagories:["enemy"]})),this.lastShot=Date.now()),this.health<=0&&L.remove(this),L.find(["friendly","projectile"]).forEach((function(o){1==c.circleCircleTest(o,t)&&(t.health-=o.damage,L.remove(o))})))},o.prototype.render=function(t){t.translate(this.position.x,this.position.y),t.rotate(-this.rotation),t.fillStyle="rgb(255, "+this.health/100*255+", "+this.health/100*255+")",t.beginPath(),t.arc(0,0,this.size.x,0,2*Math.PI),t.rect(-this.size.x/4,2*-this.size.y+5,this.size.x/2,this.size.y),t.closePath(),t.fill()},o}(n),P=function(){var t=function(o,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var i in o)Object.prototype.hasOwnProperty.call(o,i)&&(t[i]=o[i])})(o,i)};return function(o,i){function e(){this.constructor=o}t(o,i),o.prototype=null===i?Object.create(i):(e.prototype=i.prototype,new e)}}(),z=function(t){function o(o){var i=o.position,n=o.acceleration,r=void 0===n?new e(2,2):n,a=o.creation,s=void 0===a?Date.now():a,c=o.radius,h=void 0===c?7:c,p=o.speed,l=void 0===p?1:p,u=o.alpha,f=void 0===u?1:u,d=t.call(this,{position:i,size:new e(h,h),catagories:["particle"]})||this;d.acceleration=r,d.alpha=f,d.speed=l,d.creation=s;var y=d.acceleration;return y.x*=d.speed,y.y*=d.speed,d.acceleration=y,d}return P(o,t),o.prototype.tick=function(){this.position=e.add(this.position,this.acceleration),Date.now()>this.creation+3e3&&L.remove(this)},o.prototype.render=function(t){t.globalAlpha=1-(Date.now()-this.creation)/3e3,t.translate(this.position.x,this.position.y),t.beginPath(),t.arc(0,0,this.size.x,0,2*Math.PI),t.closePath(),t.fill()},o.create=function(t,o,i){for(var n=0;n<o;n++)L.add(new this({position:t,speed:5*Math.random()+5,acceleration:new e(Math.cos(i+.5*Math.random()),Math.sin(i+.5*Math.random())),radius:Math.floor(10*Math.random()+3)}))},o}(n),A=function(){var t=function(o,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var i in o)Object.prototype.hasOwnProperty.call(o,i)&&(t[i]=o[i])})(o,i)};return function(o,i){function e(){this.constructor=o}t(o,i),o.prototype=null===i?Object.create(i):(e.prototype=i.prototype,new e)}}(),j=function(t){function o(o){var i=o.position,e=o.text,n=o.fontSize,r=t.call(this,{position:i})||this;return r.text=e,r.fontSize=n,r}return A(o,t),o.prototype.setText=function(t){this.text=t},o.prototype.tick=function(){},o.prototype.render=function(t){t.font=this.fontSize+"px sans-serif",t.fillText(this.text,this.position.x,this.position.y)},o}(n),E=function(){var t=function(o,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var i in o)Object.prototype.hasOwnProperty.call(o,i)&&(t[i]=o[i])})(o,i)};return function(o,i){function e(){this.constructor=o}t(o,i),o.prototype=null===i?Object.create(i):(e.prototype=i.prototype,new e)}}(),S=function(){for(var t=0,o=0,i=arguments.length;o<i;o++)t+=arguments[o].length;var e=Array(t),n=0;for(o=0;o<i;o++)for(var r=arguments[o],a=0,s=r.length;a<s;a++,n++)e[n]=r[a];return e},T=function(t){function o(o){var i=o.position,n=o.width,r=void 0===n?5:n,a=o.rotation,s=o.creation,c=void 0===s?Date.now():s,h=o.catagories,p=o.damage,u=void 0===p?10:p,f=t.call(this,{position:i,size:new e(r,Number.MAX_VALUE),catagories:S(["lazer"],h)})||this;return f.rotation=a,f.creation=c,f.damage=u,f.width=r,f.collider=new l(new e(f.width/2,Number.MAX_VALUE),new e(-f.width/2,Number.MAX_VALUE),new e(-f.width/2,0),new e(f.width/2,0)),f}return E(o,t),o.prototype.tick=function(){},o.prototype.render=function(t){t.translate(this.position.x,this.position.y);var o=this.collider.transformedVertices(this);for(var i in this.collider.vertices)t.fillStyle="red",t.fillRect(o[i].x,o[i].y,3,3);t.fillStyle="red",t.fillRect(o[0].x,o[0].y,o[0].x-o[1].x,Number.MAX_VALUE)},o}(n),L=new b;window.em=L;var D=L.add(new _({position:new e(100,100),speed:.75,airFriction:.075,size:new e(50,64)}));L.add(new O({position:new e(700,600),size:new e(25,25)})),L.add(new j({position:new e(25,200),text:"Welcome to Interstellar!",fontSize:14})),L.add(new j({position:new e(-50,600),text:"This is a turret, it will try shooting at you if you get too close",fontSize:14})),L.add(new T({position:new e(-50,600),width:5,rotation:0,catagories:["friendly"]})),z.create(new e(100,100),10,0);var V=function(t,o){return Math.hypot(t.x-o.x,t.y-o.y)};m()}},o={};function i(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return t[e](n,n.exports,i),n.exports}i.d=(t,o)=>{for(var e in o)i.o(o,e)&&!i.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:o[e]})},i.o=(t,o)=>Object.prototype.hasOwnProperty.call(t,o),i(720)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,